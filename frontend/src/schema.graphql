type Query {
  currentUser: User
}

type User {
  id: ID!
  profile: UserProfile
  jobOffers(after: String, first: Int, before: String, last: Int): JobOfferConnection
  jobOffer(id: ID!): JobOffer
}

type UserProfile {
  location: String
}

type JobOfferConnection {
  pageInfo: PageInfo!
  edges: [JobOfferEdge]
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type JobOfferEdge {
  node: JobOffer
  cursor: String!
}

type Salary {
  start: String
  end: String
}

type JobOffer {
  id: ID!
  date: String
  title: String
  description: String
  company: String
  expiration: String
  location: String
  salary: Salary
}

type Mutation {
  updateUserProfile(input: UserProfileInput): UserProfilePayload
}

input UserProfileInput {
  location: String
  clientMutationId: String
}

type UserProfilePayload {
  profile: UserProfile
  clientMutationId: String
}
