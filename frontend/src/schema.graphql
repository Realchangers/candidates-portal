type Query {
  user(userName: ID): User
}

type Mutation {
  changeUserPassword(input: ChangePasswordInput!): ChangePasswordPayload
}

input ChangePasswordInput {
  currentPassword: String!
  newPassword: String!
  userName: ID!
  clientMutationId: String
}

type ChangePasswordPayload {
  user: User
  clientMutationId: String
}

type User {
  userName: ID
  password: String
  firstName: String
  lastName: String

  jobOffers(after: String, first: Int, before: String, last: Int): JobOfferConnection
}

type PageInfo {
  hasNextPage: Boolean!
  hasPreviousPage: Boolean!
  startCursor: String
  endCursor: String
}

type JobOfferConnection {
  pageInfo: PageInfo!
  edges: [JobOfferEdge]
}

type JobOfferEdge {
  node: JobOffer
  cursor: String!
}

type JobOffer {
  id: ID
  date: String
  title: String
  description: String
  company: String
}
